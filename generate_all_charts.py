import argparse
import json
import os
import subprocess
import sqlite3
from pathlib import Path
from datetime import datetime
import html

CHART_SPEC_PATH = 'chart_spec.json'
GENERATE_CHART_PY = 'generate_chart.py'
DB_PATH = 'logs_test.sqlite'
SEGMENTS_TABLE = 'flight_segments'

def get_flights_in_range(first=None, last=None):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    query = f"SELECT flight_id, start_timestamp, end_timestamp, duration_seconds FROM {SEGMENTS_TABLE} ORDER BY start_timestamp"
    cur.execute(query)
    flights = cur.fetchall()  # (flight_id, start_ts, end_ts, duration_seconds)
    conn.close()
    if first is not None and last is not None:
        return [f for f in flights if first <= f[0] <= last]
    elif first is not None:
        return [f for f in flights if f[0] == first]
    else:
        return flights

def group_flights_by_week(flights):
    grouped = {}
    for flight_id, start_ts, end_ts, duration in flights:
        dt = datetime.fromisoformat(start_ts)
        year, week, _ = dt.isocalendar()
        key = (year, week)
        grouped.setdefault(key, []).append((flight_id, start_ts, end_ts, duration))
    return grouped

def run_for_flight(flight_id, output_dir, start_ts=None, end_ts=None):
    flight_dir = Path(output_dir) / f"flight{flight_id}"
    flight_dir.mkdir(parents=True, exist_ok=True)
    print(f"Generating all charts for flight {flight_id} in {flight_dir} ...")
    # Call generate_chart.py ONCE per flight, batch mode
    result = subprocess.run([
        'python', GENERATE_CHART_PY,
        '--flight', str(flight_id),
        '--chart', 'all',
        '--output', str(output_dir),
        '--analyze'
    ], capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error generating charts for flight {flight_id}: {result.stderr}")
    else:
        print(result.stdout)
    # HTML report is generated by generate_chart.py
    html_path = flight_dir / f"flight{flight_id}_report.html"
    print(f"HTML report generated: {html_path}")
    return html_path

def main():
    parser = argparse.ArgumentParser(description="Generate all charts and an HTML report for a range of flights.")
    parser.add_argument('--first', type=int, help='First flight_id to process')
    parser.add_argument('--last', type=int, help='Last flight_id to process (inclusive)')
    parser.add_argument('--output_dir', type=str, default='charts_output', help='Output directory for PNGs and reports')
    args = parser.parse_args()

    # Load chart spec (for validation only)
    with open(CHART_SPEC_PATH, encoding='utf-8') as f:
        spec = json.load(f)
    charts = spec.get('charts', {})
    if not charts:
        print("No charts found in chart_spec.json.")
        return

    output_dir = Path(args.output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)

    # Determine flights to process
    flights = get_flights_in_range(args.first, args.last)
    processed_flights = []
    for flight_id, start_ts, end_ts, duration in flights:
        try:
            html_path = run_for_flight(flight_id, output_dir, start_ts, end_ts)
            if html_path:
                processed_flights.append((flight_id, start_ts, end_ts, duration))
        except Exception as e:
            print(f"Error processing flight {flight_id}: {e}")
            continue
    # Build global index.html
    grouped = group_flights_by_week(processed_flights)
    index_path = output_dir / "index.html"
    with open(index_path, 'w', encoding='utf-8') as f:
        f.write("<html><head><meta charset='utf-8'><title>Flight Chart Reports</title></head><body>\n")
        f.write("<h1>Flight Chart Reports</h1>\n")
        for (year, week) in sorted(grouped.keys()):
            f.write(f"<h2>Week {week} of {year}</h2>\n<ul>\n")
            for flight_id, start_ts, end_ts, duration in sorted(grouped[(year, week)], key=lambda x: x[1]):
                subdir = f"flight{flight_id}"
                report_name = f"flight{flight_id}_report.html"
                mins = int(duration // 60) if duration is not None else ''
                f.write(f"<li><a href='{html.escape(subdir)}/{html.escape(report_name)}'>Flight {flight_id}</a> &mdash; {html.escape(start_ts)} to {html.escape(end_ts)} ({mins} min)</li>\n")
            f.write("</ul>\n")
        f.write("</body></html>\n")
    print(f"Global index generated: {index_path}")

if __name__ == "__main__":
    main()